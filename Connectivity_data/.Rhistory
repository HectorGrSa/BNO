library("igraph")
library("plyr")
archiu <- read.csv("NeuronConnect.csv",sep = ";")
library("igraph")
library("plyr")
# documentacio matriu https://www.wormatlas.org/neuronalwiring.html#NeuronalconnectivityII
# documentacio igraph https://kateto.net/netscix2016.html
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
setwd("C:/Users/hecto/OneDrive/Escritorio/BNO/Connectivity_data")
# documentacio matriu https://www.wormatlas.org/neuronalwiring.html#NeuronalconnectivityII
# documentacio igraph https://kateto.net/netscix2016.html
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
l <- layout_with_fr(gs)
plot(gs, rescale=F, layout=l*0.4)
archiuFly <- read.csv("v1.2_exported-traced-adjacencies-v1.2.csv",sep = ",",header = F,skip = 1)
# archiuFly[,1] <- as.numeric(as.factor(archiuFly[,1]))
# archiuFly[,2] <- as.numeric(as.factor(archiuFly[,2]))
# archiuFly[,3] <- as.numeric(as.factor(archiuFly[,3]))
# gFly <- graph_from_edgelist(as.matrix(archiuFly[,c(1,2)]), directed = TRUE)
#
# gFlyS <- simplify( gFly , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
#
# save(gFlyS, file="gFlyS.RData")
load("gFlyS.RData")
#Degree distribution
#plot(gFlyS, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
degFly <- degree(gFlyS, mode="all")
deg.degFlyF <- degree_distribution(gFlyS, cumulative=F, mode="all")
deg.degFlyT <- degree_distribution(gFlyS, cumulative=T, mode="all")
tirad_census_gFlyS = triad_census(gFlyS)
#Hubs
hs_gFlyS <- hub_score(gFlyS, weights=NA)$vector
#Authorities
as_gFlyS<- authority_score(gFlyS, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gFlyS = transitivity(gFlyS)/mean_distance(gFlyS)
#modularity
library(leiden)
FlyEM_data <- list()
FlyEM_data[["deg_distF_FlyEM"]] <- deg.degFlyF
FlyEM_data[["deg_distT_FlyEM"]] <- deg.degFlyT
FlyEM_data[["triad_census_FlyEM"]] <- tirad_census_gFlyS
FlyEM_data[["hub_score_FlyEM"]] <- hs_gFlyS
FlyEM_data[["modularity_FlyEM"]] <- modularity_gFlyS
FlyEM_data[["authority_score_FlyEM"]] <- as_gFlyS
FlyEM_data[["SW_ratio_FlyEM"]] <- SM_Ratio_gFlyS
save(FlyEM_data, file="FlyEM_data.RData")
load("FlyEM_data.RData")
set.seed(2706)
er_Fly <- sample_gnm(n=length(unique(archiuFly[,1])), m=length(E(gFlyS))) #n= NUmero de nodes (unique(archiuFly[,1])) m=numero de links (length(E(gFlyS)))
#plot(er_Fly, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
deg_erFly <- degree(er_Fly, mode="all")
deg.dist_erFlyF <- degree_distribution(er_Fly, cumulative=F, mode="all")
deg.dist_erFlyT <- degree_distribution(er_Fly, cumulative=T, mode="all")
tirad_census_er_Fly = triad_census(er_Fly)
#Hubs
hs_er_Fly <- hub_score(er_Fly, weights=NA)$vector
#Authorities
as_er_Fly <- authority_score(er_Fly, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_er_Fly = transitivity(er_Fly)/mean_distance(er_Fly)
#modularity
library(leiden)
adj_mtx_er_Fly  <- igraph::as_adjacency_matrix(er_Fly)
wtc_er_Fly <- leiden(adj_mtx_er_Fly)
modularity_er_Fly <- modularity(er_Fly, wtc_er_Fly)
FlyEM_ER_data <- list()
FlyEM_ER_data[["deg_distF_FlyEM_ER"]] <- deg.dist_erFlyF
FlyEM_ER_data[["deg_distT_FlyEM_ER"]] <- deg.dist_erFlyT
FlyEM_ER_data[["triad_census_FlyEM_ER"]] <- tirad_census_er_Fly
FlyEM_ER_data[["hub_score_FlyEM_ER"]] <- hs_er_Fly
FlyEM_ER_data[["modularity_FlyEM_ER"]] <- modularity_er_Fly
FlyEM_ER_data[["authority_score_FlyEM_ER"]] <- as_er_Fly
FlyEM_ER_data[["SW_ratio_FlyEM_ER"]] <- SM_Ratio_er_Fly
save(FlyEM_ER_data, file="FlyEM_ER_data.RData")
load("FlyEM_ER_data.RData")
