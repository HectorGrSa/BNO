storage_caps_gs <- numeric()
library(Matrix)
for(j in 1:dim(am_gs)[[1]]){
storage_caps_gs <- append(storage_caps_gs, as.integer(2*log2(chooseZ(as.bigz(sum(am_gs[,j]) + nnzero(am_gs[,j]) -1), as.bigz(sum(am_gs[,j]))))))
}
storage_cap_gs <- mean(storage_caps_gs)#,na.rm=T)
celegans_data <- list()
celegans_data[["deg_distF_celegans"]] <- deg.distF
celegans_data[["deg_distT_celegans"]] <- deg.distT
celegans_data[["triad_census_celegans"]] <- tirad_gs
celegans_data[["hub_score_celegans"]] <- hs_gs
celegans_data[["modularity_celegans"]] <- modularity_gs
celegans_data[["authority_score_celegans"]] <- as_gs
celegans_data[["communitySize_celegans"]] <- communitySize_gs
celegans_data[["SW_ratio_celegans"]] <- SM_Ratio_gs
celegans_data[["cliques_celegans"]] <- cliques_gs
celegans_data[["nNodes_celegans"]] <- nNodes_gs
celegans_data[["rout_eff_celegans"]] <- rout_eff_gs
celegans_data[["storage_cap_celegans"]] <- storage_cap_gs
save(celegans_data, file="celegans_data.RData")
load("celegans_data.RData")
#Degree distribution
plot(gs, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
deg <- degree(gs, mode="all")
deg.distF <- degree_distribution(gs, cumulative=F, mode="all")
deg.distT <- degree_distribution(gs, cumulative=T, mode="all")
#Triad census
tirad_gs = triad_census(gs)
#Hubs
hs_gs <- hub_score(gs, weights=NA)$vector
#Authorities
as_gs <- authority_score(gs, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gs = transitivity(gs)/mean_distance(gs)
#modularity
library(leiden)
adj_mtx_gs  <- igraph::as_adjacency_matrix(gs)
wtc_gs <- leiden(adj_mtx_gs)
modularity_gs <- modularity(gs, wtc_gs)
#comunitats
comunitats_gs <- cluster_louvain(gs)
communitySize_gs <- comunitats_gs
#cliques
cliques_gs <- cliques(gs)
#n nodes
nNodes_gs <- gsize(gs)
#routing efficiency
am_gs  <- get.adjacency(gs)
distances_gs <- distances(gs , mode = "in", weights=1/E(gs)$weight)
library(gmp)
rout_effs_gs <- as.numeric(as.bigz(1/distances_gs)/as.bigz(dim(am_gs)[[1]]*(dim(am_gs)[[1]]-1)))
rout_effs_matrix_gs <- as.matrix(rout_effs_gs)
rout_effs_matrix_gs <- rout_effs_matrix_gs[is.finite(rout_effs_matrix_gs)]
rout_eff_gs <- as.numeric(sum(rout_effs_matrix_gs))
#storage capacity
storage_caps_gs <- numeric()
library(Matrix)
for(j in 1:dim(am_gs)[[1]]){
storage_caps_gs <- append(storage_caps_gs, as.integer(2*log2(chooseZ(as.bigz(sum(am_gs[,j]) + nnzero(am_gs[,j]) -1), as.bigz(sum(am_gs[,j]))))))
}
storage_cap_gs <- mean(storage_caps_gs)#,na.rm=T)
celegans_data <- list()
celegans_data[["deg_distF_celegans"]] <- deg.distF
celegans_data[["deg_distT_celegans"]] <- deg.distT
celegans_data[["triad_census_celegans"]] <- tirad_gs
celegans_data[["hub_score_celegans"]] <- hs_gs
celegans_data[["modularity_celegans"]] <- modularity_gs
celegans_data[["authority_score_celegans"]] <- as_gs
celegans_data[["communitySize_celegans"]] <- communitySize_gs
celegans_data[["SW_ratio_celegans"]] <- SM_Ratio_gs
celegans_data[["cliques_celegans"]] <- cliques_gs
celegans_data[["nNodes_celegans"]] <- nNodes_gs
celegans_data[["rout_eff_celegans"]] <- rout_eff_gs
celegans_data[["storage_cap_celegans"]] <- storage_cap_gs
save(celegans_data, file="celegans_data.RData")
load("celegans_data.RData")
# documentacio matriu https://www.wormatlas.org/neuronalwiring.html#NeuronalconnectivityII
# documentacio igraph https://kateto.net/netscix2016.html
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
#Degree distribution
plot(gs, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
deg <- degree(gs, mode="all")
deg.distF <- degree_distribution(gs, cumulative=F, mode="all")
deg.distT <- degree_distribution(gs, cumulative=T, mode="all")
#Triad census
tirad_gs = triad_census(gs)
#Hubs
hs_gs <- hub_score(gs, weights=NA)$vector
#Authorities
as_gs <- authority_score(gs, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gs = transitivity(gs)/mean_distance(gs)
#modularity
library(leiden)
adj_mtx_gs  <- igraph::as_adjacency_matrix(gs)
wtc_gs <- leiden(adj_mtx_gs)
modularity_gs <- modularity(gs, wtc_gs)
#comunitats
comunitats_gs <- cluster_louvain(gs)
communitySize_gs <- comunitats_gs
#cliques
cliques_gs <- cliques(gs)
#n nodes
nNodes_gs <- gsize(gs)
#routing efficiency
am_gs  <- get.adjacency(gs)
distances_gs <- distances(gs , mode = "in", weights=1/E(gs)$weight)
library(gmp)
rout_effs_gs <- as.numeric(as.bigz(1/distances_gs)/as.bigz(dim(am_gs)[[1]]*(dim(am_gs)[[1]]-1)))
rout_effs_matrix_gs <- as.matrix(rout_effs_gs)
rout_effs_matrix_gs <- rout_effs_matrix_gs[is.finite(rout_effs_matrix_gs)]
rout_eff_gs <- as.numeric(sum(rout_effs_matrix_gs))
#storage capacity
storage_caps_gs <- numeric()
library(Matrix)
for(j in 1:dim(am_gs)[[1]]){
storage_caps_gs <- append(storage_caps_gs, as.integer(2*log2(chooseZ(as.bigz(sum(am_gs[,j]) + nnzero(am_gs[,j]) -1), as.bigz(sum(am_gs[,j]))))))
}
storage_cap_gs <- mean(storage_caps_gs)#,na.rm=T)
celegans_data <- list()
celegans_data[["deg_distF_celegans"]] <- deg.distF
celegans_data[["deg_distT_celegans"]] <- deg.distT
celegans_data[["triad_census_celegans"]] <- tirad_gs
celegans_data[["hub_score_celegans"]] <- hs_gs
celegans_data[["modularity_celegans"]] <- modularity_gs
celegans_data[["authority_score_celegans"]] <- as_gs
celegans_data[["communitySize_celegans"]] <- communitySize_gs
celegans_data[["SW_ratio_celegans"]] <- SM_Ratio_gs
celegans_data[["cliques_celegans"]] <- cliques_gs
celegans_data[["nNodes_celegans"]] <- nNodes_gs
celegans_data[["rout_eff_celegans"]] <- rout_eff_gs
celegans_data[["storage_cap_celegans"]] <- storage_cap_gs
save(celegans_data, file="celegans_data.RData")
load("celegans_data.RData")
set.seed(2706)
er_xarxa1 <- sample_gnm(n=283, m=3109, directed = TRUE)
deg_xarxa1 <- degree(er_xarxa1, mode="all")
deg.dist_xarxaF1 <- degree_distribution(er_xarxa1, cumulative=F, mode="all")
deg.dist_xarxaT1 <- degree_distribution(er_xarxa1, cumulative=T, mode="all")
tirad_er_xarxa1 = triad_census(er_xarxa1)
#Hubs
hs_er_xarxa1 <- hub_score(er_xarxa1, weights=NA)$vector
#Authorities
as_er_xarxa1 <- authority_score(er_xarxa1, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_er_xarxa1 = transitivity(er_xarxa1)/mean_distance(er_xarxa1)
#modularity
library(leiden)
adj_mtx_er_xarxa1  <- igraph::as_adjacency_matrix(er_xarxa1)
wtc_er_xarxa1 <- leiden(adj_mtx_er_xarxa1)
modularity_er_xarxa1 <- modularity(er_xarxa1, wtc_er_xarxa1)
#comunitats
comunitats_er_xarxa1 <- cluster_louvain(er_xarxa1)
communitySize_er_xarxa1 <- comunitats_er_xarxa1
#cliques
cliques_er_xarxa1 <- cliques(er_xarxa1)
#n nodes
nNodes_er_xarxa1 <- gsize(er_xarxa1)
#routing efficiency
am_xarxa1  <- get.adjacency(er_xarxa1)
distances_xarxa1 <- distances(er_xarxa1 , mode = "in", weights=1/E(am_xarxa1)$weight)
library(gmp)
rout_effs_xarxa1 <- as.numeric(as.bigz(1/distances_xarxa1)/as.bigz(dim(am_xarxa1)[[1]]*(dim(am_xarxa1)[[1]]-1)))
rout_effs_matrix_xarxa1 <- as.matrix(rout_effs_xarxa1)
rout_effs_matrix_xarxa1 <- rout_effs_matrix_xarxa1[is.finite(rout_effs_matrix_xarxa1)]
rout_eff_xarxa1 <- as.numeric(sum(rout_effs_matrix_xarxa1))
#storage capacity
storage_caps_xarxa1 <- numeric()
library(Matrix)
for(j in 1:dim(am_xarxa1)[[1]]){
storage_caps_xarxa1 <- append(storage_caps_xarxa1, as.integer(2*log2(chooseZ(as.bigz(sum(am_xarxa1[,j]) + nnzero(am_xarxa1[,j]) -1), as.bigz(sum(am_xarxa1[,j]))))))
}
storage_cap_xarxa1 <- mean(storage_caps_xarxa1)#,na.rm=T)
celegansER_data <- list()
celegansER_data[["deg_distF_celegansER"]] <- deg.dist_xarxaF1
celegansER_data[["deg_distT_celegansER"]] <- deg.dist_xarxaT1
celegansER_data[["triad_census_celegansER"]] <- tirad_er_xarxa1
celegansER_data[["hub_score_celegansER"]] <- hs_er_xarxa1
celegansER_data[["modularity_celegansER"]] <- modularity_er_xarxa1
celegansER_data[["authority_score_celegansER"]] <- as_er_xarxa1
celegansER_data[["communitySize_celegansER"]] <- communitySize_er_xarxa1
celegansER_data[["SW_ratio_celegansER"]] <- SM_Ratio_er_xarxa1
celegansER_data[["cliques_celegansER"]] <- cliques_er_xarxa1
celegansER_data[["nNodes_celegansER"]] <- nNodes_er_xarxa1
celegansER_data[["rout_eff_celegansER"]] <- rout_eff_xarxa1
celegansER_data[["storage_celegansER"]] <- storage_cap_xarxa1
save(celegansER_data, file="celegansER_data.RData")
load("celegansER_data.RData")
set.seed(2706)
er_xarxa1 <- sample_gnm(n=283, m=3109, directed = TRUE)
deg_xarxa1 <- degree(er_xarxa1, mode="all")
deg.dist_xarxaF1 <- degree_distribution(er_xarxa1, cumulative=F, mode="all")
deg.dist_xarxaT1 <- degree_distribution(er_xarxa1, cumulative=T, mode="all")
tirad_er_xarxa1 = triad_census(er_xarxa1)
#Hubs
hs_er_xarxa1 <- hub_score(er_xarxa1, weights=NA)$vector
#Authorities
as_er_xarxa1 <- authority_score(er_xarxa1, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_er_xarxa1 = transitivity(er_xarxa1)/mean_distance(er_xarxa1)
#modularity
library(leiden)
adj_mtx_er_xarxa1  <- igraph::as_adjacency_matrix(er_xarxa1)
wtc_er_xarxa1 <- leiden(adj_mtx_er_xarxa1)
modularity_er_xarxa1 <- modularity(er_xarxa1, wtc_er_xarxa1)
#comunitats
comunitats_er_xarxa1 <- cluster_louvain(er_xarxa1)
communitySize_er_xarxa1 <- comunitats_er_xarxa1
#cliques
cliques_er_xarxa1 <- cliques(er_xarxa1)
#n nodes
nNodes_er_xarxa1 <- gsize(er_xarxa1)
#routing efficiency
am_xarxa1  <- get.adjacency(er_xarxa1)
distances_xarxa1 <- distances(er_xarxa1 , mode = "in", weights=1/E(am_xarxa1)$weight)
library(gmp)
rout_effs_xarxa1 <- as.numeric(as.bigz(1/distances_xarxa1)/as.bigz(dim(am_xarxa1)[[1]]*(dim(am_xarxa1)[[1]]-1)))
rout_effs_matrix_xarxa1 <- as.matrix(rout_effs_xarxa1)
rout_effs_matrix_xarxa1 <- rout_effs_matrix_xarxa1[is.finite(rout_effs_matrix_xarxa1)]
rout_eff_xarxa1 <- as.numeric(sum(rout_effs_matrix_xarxa1))
#storage capacity
storage_caps_xarxa1 <- numeric()
library(Matrix)
for(j in 1:dim(am_xarxa1)[[1]]){
storage_caps_xarxa1 <- append(storage_caps_xarxa1, as.integer(2*log2(chooseZ(as.bigz(sum(am_xarxa1[,j]) + nnzero(am_xarxa1[,j]) -1), as.bigz(sum(am_xarxa1[,j]))))))
}
storage_cap_xarxa1 <- mean(storage_caps_xarxa1)#,na.rm=T)
celegansER_data <- list()
celegansER_data[["deg_distF_celegansER"]] <- deg.dist_xarxaF1
celegansER_data[["deg_distT_celegansER"]] <- deg.dist_xarxaT1
celegansER_data[["triad_census_celegansER"]] <- tirad_er_xarxa1
celegansER_data[["hub_score_celegansER"]] <- hs_er_xarxa1
celegansER_data[["modularity_celegansER"]] <- modularity_er_xarxa1
celegansER_data[["authority_score_celegansER"]] <- as_er_xarxa1
celegansER_data[["communitySize_celegansER"]] <- communitySize_er_xarxa1
celegansER_data[["SW_ratio_celegansER"]] <- SM_Ratio_er_xarxa1
celegansER_data[["cliques_celegansER"]] <- cliques_er_xarxa1
celegansER_data[["nNodes_celegansER"]] <- nNodes_er_xarxa1
celegansER_data[["rout_eff_celegansER"]] <- rout_eff_xarxa1
celegansER_data[["storage_celegansER"]] <- storage_cap_xarxa1
save(celegansER_data, file="celegansER_data.RData")
load("celegansER_data.RData")
# documentacio matriu https://www.wormatlas.org/neuronalwiring.html#NeuronalconnectivityII
# documentacio igraph https://kateto.net/netscix2016.html
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
#Degree distribution
plot(gs, vertex.size=6, vertex.label=NA, layout=layout_in_circle)
deg <- degree(gs, mode="all")
deg.distF <- degree_distribution(gs, cumulative=F, mode="all")
deg.distT <- degree_distribution(gs, cumulative=T, mode="all")
#Triad census
tirad_gs = triad_census(gs)
#Hubs
hs_gs <- hub_score(gs, weights=NA)$vector
#Authorities
as_gs <- authority_score(gs, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gs = transitivity(gs)/mean_distance(gs)
#modularity
library(leiden)
adj_mtx_gs  <- igraph::as_adjacency_matrix(gs)
wtc_gs <- leiden(adj_mtx_gs)
modularity_gs <- modularity(gs, wtc_gs)
#comunitats
comunitats_gs <- cluster_louvain(gs)
communitySize_gs <- comunitats_gs
#cliques
cliques_gs <- cliques(gs)
#n nodes
nNodes_gs <- gsize(gs)
#routing efficiency
am_gs  <- get.adjacency(gs)
distances_gs <- distances(gs , mode = "in", weights=1/E(gs)$weight)
library(gmp)
rout_effs_gs <- as.numeric(as.bigz(1/distances_gs)/as.bigz(dim(am_gs)[[1]]*(dim(am_gs)[[1]]-1)))
rout_effs_matrix_gs <- as.matrix(rout_effs_gs)
rout_effs_matrix_gs <- rout_effs_matrix_gs[is.finite(rout_effs_matrix_gs)]
rout_eff_gs <- as.numeric(sum(rout_effs_matrix_gs))
#storage capacity
storage_caps_gs <- numeric()
library(Matrix)
for(j in 1:dim(am_gs)[[1]]){
storage_caps_gs <- append(storage_caps_gs, as.integer(2*log2(chooseZ(as.bigz(sum(am_gs[,j]) + nnzero(am_gs[,j]) -1), as.bigz(sum(am_gs[,j]))))))
}
storage_cap_gs <- mean(storage_caps_gs)#,na.rm=T)
celegans_data <- list()
celegans_data[["deg_distF_celegans"]] <- deg.distF
celegans_data[["deg_distT_celegans"]] <- deg.distT
celegans_data[["triad_census_celegans"]] <- tirad_gs
celegans_data[["hub_score_celegans"]] <- hs_gs
celegans_data[["modularity_celegans"]] <- modularity_gs
celegans_data[["authority_score_celegans"]] <- as_gs
celegans_data[["communitySize_celegans"]] <- communitySize_gs
celegans_data[["SW_ratio_celegans"]] <- SM_Ratio_gs
celegans_data[["cliques_celegans"]] <- cliques_gs
celegans_data[["nNodes_celegans"]] <- nNodes_gs
celegans_data[["rout_eff_celegans"]] <- rout_eff_gs
celegans_data[["storage_cap_celegans"]] <- storage_cap_gs
save(celegans_data, file="celegans_data.RData")
load("celegans_data.RData")
library("igraph")
library("plyr")
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
deg <- degree(gs, mode="all")
deg.distF <- degree_distribution(gs, cumulative=F, mode="all")
deg.distT <- degree_distribution(gs, cumulative=T, mode="all")
#Triad census
tirad_gs = triad_census(gs)
#Hubs
hs_gs <- hub_score(gs, weights=NA)$vector
#Authorities
as_gs <- authority_score(gs, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gs = transitivity(gs)/mean_distance(gs)
#modularity
library(leiden)
adj_mtx_gs  <- igraph::as_adjacency_matrix(gs)
wtc_gs <- leiden(adj_mtx_gs)
modularity_gs <- modularity(gs, wtc_gs)
#comunitats
comunitats_gs <- cluster_louvain(gs)
communitySize_gs <- comunitats_gs
library("igraph")
library("plyr")
#Preparacio dades C.Elegans
# documentacio matriu https://www.wormatlas.org/neuronalwiring.html#NeuronalconnectivityII
# documentacio igraph https://kateto.net/netscix2016.html
archiu <- read.csv("NeuronConnect.csv",sep = ";")
unique(archiu$Type)
ab <- nrow(archiu)
for (i in 1:ab) {
if(archiu[i,3]=="R" | archiu[i,3]=="Rp"){
archiu[i,] <- archiu[i, c(2,1,3,4)]
}
if(archiu[i,3]=="EJ"){
archiu <- rbind.fill(archiu,archiu[i,])
}
}
g <- graph_from_edgelist(as.matrix(archiu[,c(1,2)]), directed = TRUE)
E(g)$weight <- archiu$Nbr
E(g)$name <- archiu$Type
gs <- simplify( g , remove.multiple = T, remove.loops = F, edge.attr.comb=c(weight="sum", type="ignore") )
# l <- layout_with_fr(gs)
# plot(gs, rescale=F, layout=l*0.4)
#
# l <- layout_with_fr(gs)
#
# V(gs)$color <- colrs[V(gs)$media.type]
#
# V(gs)$size <- V(gs)$audience.size*0.7
#
# V(gs)$label.color <- "black"
#
# V(gs)$label <- NA
#
# E(gs)$width <- E(gs)$weight/6
#
# E(gs)$arrow.size <- .2
#
# E(gs)$width <- 1+E(gs)$weight/12
#
# plot(gs,rescale=F,layout=l*0.8)
#
# barplot(triad_census(gs), log="y")
#
# #Color nodes along the diameter:
#
# diam <- get_diameter(gs, directed=T)
#
# as.vector(diam)
#
# vcol <- rep("gray40", vcount(gs))
#
# vcol[diam] <- "gold"
#
# ecol <- rep("gray80", ecount(gs))
#
# ecol[E(gs, path=diam)] <- "orange"
#
#
# plot(gs, rescale=F,vertex.color=vcol, edge.color=ecol, edge.arrow.mode=0)
#
# #encontrar el camino más corto entre nodos específicos.
#
# news.path <- shortest_paths(gs,
#
#                             from = V(gs)[as.list(names)=="ADFL"],
#
#                             to  = V(gs)[as.list(names)=="SMBVR"],
#
#                             output = "both") # both path nodes and edges
#
#
#
# # Generate edge color variable to plot the path:
#
# ecol <- rep("gray80", ecount(gs))
#
# ecol[unlist(news.path$epath)] <- "orange"
#
# # Generate edge width variable to plot the path:
#
# ew <- rep(2, ecount(gs))
#
# ew[unlist(news.path$epath)] <- 4
#
# # Generate node color variable to plot the path:
#
# vcol <- rep("gray40", vcount(gs))
#
# vcol[unlist(news.path$vpath)] <- "gold"
#
#
#
# plot(gs,rescale=F, vertex.color=vcol, edge.color=ecol,
#
#      edge.width=ew, edge.arrow.mode=0)
#
# inc.edges <- incident(gs,  V(gs)[media=="ADFL"], mode="all")
#
#
#
# # Set colors to plot the selected edges.
#
# ecol <- rep("gray80", ecount(gs))
#
# ecol[inc.edges] <- "orange"
#
# vcol <- rep("grey40", vcount(gs))
#
# vcol[V(gs)$media=="ADFL"] <- "gold"
#
# plot(gs,rescale=F, vertex.color=vcol, edge.color=ecol)
#
# cocitation(gs)
#
# #comunidades
# ceb <- cluster_edge_betweenness(gs)
#
# plot(ceb, gs)
#
# cfg <- cluster_fast_greedy(as.undirected(gs))
#
# plot(cfg, as.undirected(gs))
#
# l <- layout_with_fr(gs)
#
# plot(cfg, resacle=F, as.undirected(gs), layout=l*1.0)
#----------------------------------------------------------C_elegans--------------------------------------------------------#
deg <- degree(gs, mode="all")
deg.distF <- degree_distribution(gs, cumulative=F, mode="all")
deg.distT <- degree_distribution(gs, cumulative=T, mode="all")
#Triad census
tirad_gs = triad_census(gs)
#Hubs
hs_gs <- hub_score(gs, weights=NA)$vector
#Authorities
as_gs <- authority_score(gs, weights=NA)$vector
#Small-Worldness ratio:
SM_Ratio_gs = transitivity(gs)/mean_distance(gs)
#modularity
library(leiden)
adj_mtx_gs  <- igraph::as_adjacency_matrix(gs)
wtc_gs <- leiden(adj_mtx_gs)
modularity_gs <- modularity(gs, wtc_gs)
update.packages("igraph")
sessionInfo()
library(remotes)
remotes::install_github("igraph/rigraph@master")
sessionInfo()
